* bubble sort

def my_bubblesort(my_list):
    for other_i in range(0, len(my_list)-1): # O(n)
        for i in range(len(my_list)-1, other_i, -1): # O(n^2)
            current_number = my_list[i] # O(1)
            next_number = my_list[i-1] # O(1)
            print(f'Elemento actual: {current_number}, Siguiente elemento: {next_number}') # O(1)
            if current_number < next_number: # O(1)
                print("El numero siguiente es mayor. Realizando cambios...") # O(1)
                my_list[i] = next_number # O(1)
                my_list[i-1] = current_number # O(1)


my_list = [5,7,3,8,2,9,1] # O(1)
my_bubblesort(my_list) # O(nÂ²)
print(my_list) # O(1)

------------------------------------------------------------------------------------------------------------------------------------------

* print_numbers_times_2

def print_numbers_times_2(numbers_list):
	for number in numbers_list: O(n)
		print(number * 2) # O(1)

-------------------------------------------------------------------------------------------------------------------------------------------

* check_if_lists_have_an_equal

def check_if_lists_have_an_equal(list_a, list_b):
	for element_a in list_a: #O(n)
		for element_b in list_b: #O(n^2)
			if element_a == element_b: # 0(1) 
				return True # O(1)
				
	return False # O(1)

-------------------------------------------------------------------------------------------------------------------------------------------

* print_10_or_less_elements

def print_10_or_less_elements(list_to_print):
	list_len = len(list_to_print) # O(1)
	for index in range(min(list_len, 10)): #O(n)
        print(list_to_print[index]) # O(1)

-------------------------------------------------------------------------------------------------------------------------------------------

* enerate_list_trios

def generate_list_trios(list_a, list_b, list_c):
	result_list = [] # O(1)
	for element_a in list_a: #O(n)
		for element_b in list_b: #O(n^2)
			for element_c in list_c: #O(n^3)
				result_list.append(f'{element_a} {element_b} {element_c}') # O(1)
				
	return result_list # O(1)